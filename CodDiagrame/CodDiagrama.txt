@startuml MedCare Appointment System

!define Interface(name) class name << interface >>
!define Abstract(name) abstract class name

package "Presentation Layer" {
  class LoginForm {
    + login(username, password): boolean
    + showErrorMessage(message): void
  }
  
  class AdminDashboard {
    + showUserManagement(): void
    + showDoctorManagement(): void
    + showServiceManagement(): void
    + showReports(): void
  }
  
  class ReceptionistDashboard {
    + showAppointmentManagement(): void
  }
  
  class UserManagementForm {
    + addUser(name, username, password): void
    + updateUser(id, name, username, password): void
    + deleteUser(id): void
    + getUsers(): List<User>
  }
  
  class DoctorManagementForm {
    + addDoctor(name, specialization, workHours): void
    + updateDoctor(id, name, specialization, workHours): void
    + deleteDoctor(id): void
    + getDoctors(): List<Doctor>
  }
  
  class ServiceManagementForm {
    + addService(name, price, duration): void
    + updateService(id, name, price, duration): void
    + deleteService(id): void
    + getServices(): List<MedicalService>
  }
  
  class AppointmentManagementForm {
    + createAppointment(patientName, doctor, dateTime, service): void
    + updateAppointmentStatus(id, status): void
    + getAppointments(): List<Appointment>
  }
  
  class ReportForm {
    + generateReport(startDate, endDate): Report
    + exportReportToCSV(report, filePath): void
    + exportReportToXML(report, filePath): void
  }
}

package "Business Logic Layer" {
  Interface(IService) {
    + create(entity): T
    + update(entity): T
    + delete(id): boolean
    + getById(id): T
    + getAll(): List<T>
  }
  
  class UserService {
    - userDAO: UserDAO
    + authenticate(username, password): User
    + encryptPassword(password): String
  }
  
  class DoctorService {
    - doctorDAO: DoctorDAO
    + checkAvailability(doctorId, dateTime, duration): boolean
  }
  
  class MedicalServiceService {
    - medicalServiceDAO: MedicalServiceDAO
  }
  
  class AppointmentService {
    - appointmentDAO: AppointmentDAO
    - doctorService: DoctorService
    + getAppointmentsByDateRange(start, end): List<Appointment>
    + getMostRequestedDoctors(): Map<Doctor, Integer>
    + getMostRequestedServices(): Map<MedicalService, Integer>
  }
  
  UserService ..|> IService
  DoctorService ..|> IService
  MedicalServiceService ..|> IService
  AppointmentService ..|> IService
}

package "Data Access Layer" {
  Interface(IDAO) {
    + insert(entity): T
    + update(entity): T
    + delete(id): boolean
    + findById(id): T
    + findAll(): List<T>
  }
  
  Abstract(AbstractDAO) {
    # connection: Connection
    # createConnection(): Connection
    # closeConnection(conn): void
  }
  
  class UserDAO {
    + findByUsername(username): User
  }
  
  class DoctorDAO {
    + findBySpecialization(specialization): List<Doctor>
  }
  
  class MedicalServiceDAO {
  }
  
  class AppointmentDAO {
    + findByDateRange(start, end): List<Appointment>
    + findByDoctor(doctorId): List<Appointment>
    + findByStatus(status): List<Appointment>
  }
  
  AbstractDAO ..|> IDAO
  AbstractDAO <|-- UserDAO
  AbstractDAO <|-- DoctorDAO
  AbstractDAO <|-- MedicalServiceDAO
  AbstractDAO <|-- AppointmentDAO
}

package "Data Layer" {
  class User {
    - id: int
    - name: String
    - username: String
    - password: String
    - role: UserRole
  }
  
  enum UserRole {
    ADMIN
    RECEPTIONIST
  }
  
  class Doctor {
    - id: int
    - name: String
    - specialization: String
    - workHours: String
  }
  
  class MedicalService {
    - id: int
    - name: String
    - price: double
    - duration: int
  }
  
  class Appointment {
    - id: int
    - patientName: String
    - doctor: Doctor
    - dateTime: DateTime
    - service: MedicalService
    - status: AppointmentStatus
  }
  
  enum AppointmentStatus {
    NEW
    IN_PROGRESS
    COMPLETED
  }
  
  class Database {
    - connection: Connection
    + connect(): Connection
    + disconnect(conn): void
    + executeQuery(query): ResultSet
    + executeUpdate(query): int
  }
  
  User -- UserRole
  Appointment -- AppointmentStatus
  Appointment -- Doctor
  Appointment -- MedicalService
}

' Relationships between layers
UserService --> UserDAO
DoctorService --> DoctorDAO
MedicalServiceService --> MedicalServiceDAO
AppointmentService --> AppointmentDAO
AppointmentService --> DoctorService

LoginForm --> UserService
AdminDashboard --> UserService
AdminDashboard --> DoctorService
AdminDashboard --> MedicalServiceService
AdminDashboard --> AppointmentService
ReceptionistDashboard --> AppointmentService
UserManagementForm --> UserService
DoctorManagementForm --> DoctorService
ServiceManagementForm --> MedicalServiceService
AppointmentManagementForm --> AppointmentService
AppointmentManagementForm --> DoctorService
AppointmentManagementForm --> MedicalServiceService
ReportForm --> AppointmentService

UserDAO --> Database
DoctorDAO --> Database
MedicalServiceDAO --> Database
AppointmentDAO --> Database

@enduml